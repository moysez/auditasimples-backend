import os
import logging
from fastapi import APIRouter, HTTPException, Form, Depends
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import jwt
from passlib.context import CryptContext

from ..db import get_session
from app.models import User

# ------------------------------------------------------------
# ‚öôÔ∏è Configura√ß√£o geral
# ------------------------------------------------------------
router = APIRouter(tags=["Autentica√ß√£o"])

logger = logging.getLogger("auditassimples.auth")
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

SECRET_KEY = os.getenv("JWT_SECRET", "chave-secreta-supersegura")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 240

IS_RENDER = os.getenv("ENV", "local").lower() == "render"


# ------------------------------------------------------------
# üîê Fun√ß√µes auxiliares
# ------------------------------------------------------------
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


# ------------------------------------------------------------
# üßæ Login de usu√°rio
# ------------------------------------------------------------
@router.post("/login")
def login(username: str = Form(...), password: str = Form(...), db: Session = Depends(get_session)):
    try:
        user = db.query(User).filter(User.username == username).first()

        if not user:
            raise HTTPException(status_code=401, detail="Usu√°rio n√£o encontrado")

        if not verify_password(password, user.password_hash):
            raise HTTPException(status_code=401, detail="Senha incorreta")

        token = create_access_token({"sub": username})
        logger.info(f"‚úÖ Login bem-sucedido: {username}")

        return JSONResponse(content={
            "access_token": token,
            "token_type": "bearer",
            "user": {"id": user.id, "username": user.username},
            "environment": "Render" if IS_RENDER else "Local"
        })

    except Exception as e:
        logger.exception("Erro inesperado no login")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


# ------------------------------------------------------------
# üë§ Cria√ß√£o de usu√°rio (para testes locais)
# ------------------------------------------------------------
@router.post("/register")
def register_user(username: str = Form(...), password: str = Form(...), db: Session = Depends(get_session)):
    """Endpoint opcional ‚Äî √∫til apenas em ambiente local para criar usu√°rios."""
    if IS_RENDER:
        raise HTTPException(status_code=403, detail="Cria√ß√£o de usu√°rios desabilitada no ambiente de produ√ß√£o.")

    from app.models import User

    if db.query(User).filter(User.username == username).first():
        raise HTTPException(status_code=400, detail="Usu√°rio j√° existe")

    hashed_password = pwd_context.hash(password)
    user = User(username=username, password_hash=hashed_password)
    db.add(user)
    db.commit()
    db.refresh(user)

    logger.info(f"üë§ Usu√°rio criado: {username}")
    return {"message": "Usu√°rio criado com sucesso", "user_id": user.id}
